<?php
 namespace App\Http\Controllers; use App\Http\Middleware\confirmPassword; use App\Models\accounts; use App\Models\categories; use App\Models\products; use App\Models\sale_details; use App\Models\sale_payments; use App\Models\sales; use App\Models\salesman; use App\Models\stock; use App\Models\transactions; use App\Models\units; use App\Models\warehouses; use Pdf; use Exception; use Illuminate\Http\Request; use Illuminate\Support\Facades\DB; use Spatie\Browsershot\Browsershot; use Illuminate\Routing\Controller; class SalesController extends Controller { public function __construct() { $this->middleware(confirmPassword::class)->only("\x65\144\x69\x74"); } public function index(Request $request) { $start = $request->start ?? date("\x59\x2d\x6d\x2d\x64"); $end = $request->end ?? date("\x59\x2d\155\55\144"); $sales = sales::with("\160\141\x79\155\x65\x6e\164\x73")->whereBetween("\144\141\x74\x65", array($start, $end))->orderby("\x69\144", "\144\145\x73\143")->paginate(10); return view("\163\141\x6c\x65\163\56\x69\156\144\145\170", compact("\x73\x61\x6c\145\x73", "\x73\x74\x61\162\x74", "\x65\x6e\x64")); } public function create() { $products = products::orderby("\x6e\141\x6d\x65", "\141\x73\143")->get(); $warehouses = warehouses::all(); $customers = accounts::Chief()->get(); $cats = categories::orderBy("\x6e\141\x6d\145", "\141\163\x63")->get(); return view("\x73\x61\x6c\145\163\x2e\143\x72\145\x61\x74\x65", compact("\160\x72\x6f\x64\x75\x63\164\163", "\x77\x61\x72\145\150\x6f\165\x73\145\x73", "\143\165\163\x74\x6f\155\x65\x72\x73", "\143\x61\164\163")); } public function store(Request $request) { try { if ($request->isNotFilled("\x69\x64")) { throw new Exception("\x50\154\145\141\x73\x65\x20\123\x65\154\145\x63\x74\40\101\x74\x6c\145\141\x73\164\40\117\x6e\x65\40\120\162\x6f\144\x75\143\164"); } DB::beginTransaction(); $ref = getRef(); $sale = sales::create(array("\143\165\163\164\x6f\155\145\x72\x49\104" => $request->customerID, "\144\141\x74\x65" => $request->date, "\x6e\157\x74\145\163" => $request->notes, "\x63\165\x73\x74\x6f\155\x65\x72\x4e\141\155\145" => $request->customerName, "\x72\145\146\x49\x44" => $ref)); $ids = $request->id; foreach ($ids as $key => $id) { $qty = $request->qty[$key]; sale_details::create(array("\x73\x61\154\145\163\x49\x44" => $sale->id, "\160\162\x6f\x64\x75\143\x74\111\104" => $id, "\x77\141\162\x65\150\x6f\x75\163\145\111\104" => $request->warehouse[$key], "\x71\x74\171" => $qty, "\144\141\164\x65" => $request->date, "\x72\145\x66\x49\104" => $ref)); createStock($id, 0, $qty, $request->date, "\111\163\x73\x75\145\144\40\151\156\x20\x56\x6f\x75\143\150\141\x72\x20\43\40{$sale->id}", $ref, $request->warehouse[$key]); } DB::commit(); return to_route("\163\x61\x6c\145\x2e\x73\x68\x6f\x77", $sale->id)->with("\163\165\143\x63\145\163\163", "\x56\157\165\x63\150\x61\162\40\x43\x72\145\x61\x74\x65\x64"); } catch (\Exception $e) { DB::rollback(); return back()->with("\x65\162\162\157\x72", $e->getMessage()); } } public function show(sales $sale) { return view("\163\x61\154\x65\163\x2e\x76\151\145\x77", compact("\x73\x61\x6c\145")); } public function pdf($id) { $sale = sales::find($id); $pdf = Pdf::loadview("\x73\x61\154\145\x73\56\160\144\x66", compact("\163\x61\x6c\145")); return $pdf->download("\x49\x6e\x76\x6f\x69\x63\x65\x20\x4e\x6f\56\40{$sale->id}\56\160\x64\146"); } public function edit(sales $sale) { $products = products::orderby("\x6e\x61\155\x65", "\x61\163\143")->get(); $warehouses = warehouses::all(); $customers = accounts::shop()->get(); session()->forget("\143\x6f\x6e\x66\x69\x72\155\x65\x64\137\x70\141\x73\163\167\x6f\x72\x64"); return view("\x73\141\x6c\x65\x73\x2e\145\x64\x69\x74", compact("\x70\x72\x6f\144\x75\143\x74\163", "\x77\x61\x72\145\x68\x6f\165\163\145\x73", "\x63\165\163\x74\157\155\x65\x72\163", "\x73\x61\154\145")); } public function update(Request $request, $id) { dashboard(); try { DB::beginTransaction(); $sale = sales::find($id); foreach ($sale->details as $product) { stock::where("\162\x65\x66\x49\104", $product->refID)->delete(); $product->delete(); } $ref = $sale->refID; $sale->update(array("\143\165\x73\164\157\155\x65\x72\x49\x44" => $request->customerID, "\144\x61\164\x65" => $request->date, "\x6e\157\x74\145\x73" => $request->notes, "\x63\x75\163\x74\x6f\x6d\145\162\116\x61\155\x65" => $request->customerName)); $ids = $request->id; foreach ($ids as $key => $id) { $qty = $request->qty[$key]; sale_details::create(array("\x73\141\154\x65\x73\111\104" => $sale->id, "\160\162\x6f\x64\x75\143\x74\111\104" => $id, "\x77\141\x72\x65\150\x6f\x75\x73\x65\x49\x44" => $request->warehouse[$key], "\161\164\x79" => $qty, "\144\x61\x74\145" => $request->date, "\162\145\146\x49\x44" => $ref)); createStock($id, 0, $qty, $request->date, "\x49\x73\x73\165\145\144\40\151\x6e\x20\x56\x6f\x75\x63\x68\141\162\40\43\40{$sale->id}", $ref, $request->warehouse[$key]); } DB::commit(); return to_route("\x73\x61\154\145\x2e\151\x6e\x64\145\170")->with("\x73\165\143\x63\145\163\x73", "\126\157\165\x63\x68\141\x72\40\x55\x70\144\x61\x74\145\144"); } catch (\Exception $e) { DB::rollBack(); return to_route("\163\141\x6c\145\x2e\x69\x6e\x64\x65\170")->with("\x65\x72\x72\157\x72", $e->getMessage()); } } public function destroy($id) { try { DB::beginTransaction(); $sale = sales::find($id); foreach ($sale->payments as $payment) { transactions::where("\162\145\x66\x49\104", $payment->refID)->delete(); $payment->delete(); } foreach ($sale->details as $product) { stock::where("\x72\145\x66\x49\104", $product->refID)->delete(); $product->delete(); } transactions::where("\x72\x65\146\111\104", $sale->refID)->delete(); $sale->delete(); DB::commit(); session()->forget("\x63\157\156\x66\151\162\155\145\144\137\x70\141\x73\163\x77\157\162\144"); return to_route("\163\141\x6c\145\56\x69\x6e\x64\x65\170")->with("\163\165\143\x63\145\x73\x73", "\x53\141\x6c\145\x20\x44\145\x6c\x65\164\145\144"); } catch (\Exception $e) { DB::rollBack(); session()->forget("\143\x6f\156\146\151\162\x6d\145\144\x5f\160\141\163\163\x77\157\x72\144"); return to_route("\163\x61\x6c\x65\56\151\x6e\x64\145\170")->with("\145\x72\162\x6f\x72", $e->getMessage()); } } public function getSignleProduct($id) { $product = products::with("\x63\141\x74\x65\147\157\x72\171")->find($id); $product->stock = getStock($id); return $product; } }