<?php
 namespace App\Http\Controllers; use App\Http\Middleware\confirmPassword; use App\Models\accounts; use App\Models\categories; use App\Models\products; use App\Models\sale_details; use App\Models\sale_payments; use App\Models\sales; use App\Models\salesman; use App\Models\stock; use App\Models\transactions; use App\Models\units; use App\Models\warehouses; use Pdf; use Exception; use Illuminate\Http\Request; use Illuminate\Support\Facades\DB; use Spatie\Browsershot\Browsershot; use Illuminate\Routing\Controller; class SalesController extends Controller { public function __construct() { $this->middleware(confirmPassword::class)->only("\x65\x64\151\164"); } public function index() { $sales = sales::with("\160\141\x79\155\x65\x6e\x74\163")->orderby("\151\144", "\x64\x65\163\x63")->paginate(10); return view("\x73\x61\x6c\145\163\x2e\151\x6e\144\145\170", compact("\x73\x61\154\145\x73")); } public function create() { $products = products::orderby("\156\141\x6d\x65", "\x61\x73\x63")->get(); $warehouses = warehouses::all(); $customers = accounts::Chief()->get(); $cats = categories::orderBy("\x6e\x61\x6d\x65", "\141\x73\143")->get(); return view("\x73\141\x6c\x65\x73\x2e\143\162\145\x61\164\145", compact("\160\162\x6f\x64\x75\143\x74\x73", "\x77\x61\x72\145\150\157\165\x73\145\163", "\143\x75\x73\x74\157\155\145\162\163", "\x63\x61\164\163")); } public function store(Request $request) { try { if ($request->isNotFilled("\151\x64")) { throw new Exception("\x50\x6c\x65\x61\163\x65\40\x53\x65\x6c\x65\x63\x74\40\x41\x74\x6c\x65\x61\163\x74\x20\117\156\145\x20\x50\162\157\x64\165\143\x74"); } DB::beginTransaction(); $ref = getRef(); $sale = sales::create(array("\x63\165\163\164\x6f\x6d\145\162\111\x44" => $request->customerID, "\x64\141\x74\x65" => $request->date, "\156\x6f\164\145\x73" => $request->notes, "\143\165\x73\x74\x6f\155\x65\162\x4e\141\x6d\x65" => $request->customerName, "\x72\x65\x66\111\104" => $ref)); $ids = $request->id; foreach ($ids as $key => $id) { $qty = $request->qty[$key]; sale_details::create(array("\163\x61\154\145\x73\x49\x44" => $sale->id, "\x70\162\157\x64\x75\143\x74\x49\104" => $id, "\167\x61\x72\145\150\157\x75\x73\x65\111\104" => $request->warehouse[$key], "\161\164\x79" => $qty, "\x64\x61\164\145" => $request->date, "\x72\x65\x66\x49\x44" => $ref)); createStock($id, 0, $qty, $request->date, "\x49\x73\x73\165\145\x64\x20\151\156\40\126\x6f\165\143\150\x61\162\40\x23\x20{$sale->id}", $ref, $request->warehouse[$key]); } DB::commit(); return to_route("\163\x61\x6c\145\x2e\x73\x68\157\167", $sale->id)->with("\163\165\x63\143\145\x73\163", "\x56\x6f\x75\143\x68\141\162\40\x43\x72\145\141\x74\x65\x64"); } catch (\Exception $e) { DB::rollback(); return back()->with("\x65\162\x72\x6f\x72", $e->getMessage()); } } public function show(sales $sale) { return view("\x73\x61\x6c\145\163\56\x76\151\x65\167", compact("\x73\141\154\x65")); } public function pdf($id) { $sale = sales::find($id); $pdf = Pdf::loadview("\x73\141\154\145\163\x2e\160\144\x66", compact("\x73\141\154\x65")); return $pdf->download("\x49\156\x76\x6f\151\143\145\40\116\x6f\56\x20{$sale->id}\56\160\x64\x66"); } public function edit(sales $sale) { $products = products::orderby("\x6e\x61\155\145", "\x61\x73\x63")->get(); $warehouses = warehouses::all(); $customers = accounts::shop()->get(); session()->forget("\143\157\x6e\146\x69\162\x6d\x65\x64\x5f\x70\x61\x73\163\x77\157\162\144"); return view("\163\141\154\x65\163\56\x65\144\151\x74", compact("\160\x72\157\x64\165\143\x74\x73", "\x77\141\162\145\150\157\165\x73\145\163", "\143\165\x73\164\x6f\x6d\145\162\163", "\163\x61\154\x65")); } public function update(Request $request, $id) { dashboard(); try { DB::beginTransaction(); $sale = sales::find($id); foreach ($sale->details as $product) { stock::where("\162\145\146\x49\x44", $product->refID)->delete(); $product->delete(); } $ref = $sale->refID; $sale->update(array("\x63\x75\163\x74\x6f\155\145\x72\111\104" => $request->customerID, "\x64\141\x74\x65" => $request->date, "\156\157\x74\145\x73" => $request->notes, "\143\165\x73\164\x6f\155\145\x72\x4e\x61\x6d\x65" => $request->customerName)); $ids = $request->id; foreach ($ids as $key => $id) { $qty = $request->qty[$key]; sale_details::create(array("\x73\141\x6c\145\163\111\x44" => $sale->id, "\160\162\157\144\x75\x63\164\111\x44" => $id, "\x77\141\x72\x65\150\157\x75\x73\x65\x49\104" => $request->warehouse[$key], "\161\164\171" => $qty, "\x64\x61\x74\x65" => $request->date, "\x72\x65\146\x49\x44" => $ref)); createStock($id, 0, $qty, $request->date, "\111\163\163\x75\145\x64\40\151\x6e\40\x56\157\165\x63\x68\x61\162\x20\x23\40{$sale->id}", $ref, $request->warehouse[$key]); } DB::commit(); return to_route("\x73\x61\154\145\56\151\x6e\144\x65\170")->with("\x73\x75\143\143\145\163\163", "\126\157\165\143\x68\141\162\40\125\160\144\x61\164\145\x64"); } catch (\Exception $e) { DB::rollBack(); return to_route("\x73\141\x6c\145\56\151\x6e\x64\145\x78")->with("\x65\162\162\157\x72", $e->getMessage()); } } public function destroy($id) { try { DB::beginTransaction(); $sale = sales::find($id); foreach ($sale->payments as $payment) { transactions::where("\162\145\146\111\104", $payment->refID)->delete(); $payment->delete(); } foreach ($sale->details as $product) { stock::where("\162\x65\146\111\104", $product->refID)->delete(); $product->delete(); } transactions::where("\162\145\146\111\x44", $sale->refID)->delete(); $sale->delete(); DB::commit(); session()->forget("\143\157\x6e\x66\x69\x72\155\x65\x64\137\160\x61\x73\x73\167\x6f\x72\144"); return to_route("\163\141\154\145\56\x69\156\x64\145\170")->with("\163\165\143\143\145\x73\163", "\123\x61\x6c\x65\40\104\x65\154\145\164\x65\x64"); } catch (\Exception $e) { DB::rollBack(); session()->forget("\143\x6f\x6e\x66\151\162\x6d\x65\x64\x5f\160\x61\163\163\167\157\x72\144"); return to_route("\163\x61\154\145\56\151\156\144\145\170")->with("\x65\x72\x72\157\162", $e->getMessage()); } } public function getSignleProduct($id) { $product = products::with("\x63\x61\x74\145\147\x6f\162\x79")->find($id); $product->stock = getStock($id); return $product; } }