<?php
 namespace App\Http\Controllers; use App\Models\products; use App\Models\stock; use App\Models\stockTransfer; use App\Models\stockTransferDetails; use App\Models\warehouses; use Exception; use Illuminate\Http\Request; use Illuminate\Support\Facades\DB; class StockTransferController extends Controller { public function index() { $transfers = stockTransfer::orderBy("\x69\144", "\x64\145\x73\x63")->get(); return view("\x73\164\x6f\x63\153\56\x74\x72\x61\156\x73\x66\x65\162\x2e\x69\x6e\x64\145\170", compact("\x74\162\141\156\x73\146\x65\x72\163")); } public function create() { $products = products::orderby("\x6e\x61\155\145", "\x61\163\x63")->get(); $warehouses = warehouses::all(); return view("\x73\x74\x6f\143\x6b\56\x74\162\141\156\x73\146\x65\162\x2e\143\x72\x65\x61\164\145", compact("\160\x72\x6f\x64\x75\143\164\163", "\x77\141\x72\x65\x68\x6f\x75\163\x65\163")); } public function store(Request $request) { try { if ($request->isNotFilled("\151\x64")) { throw new Exception("\x50\154\145\x61\163\x65\40\x53\145\154\x65\x63\164\x20\101\x74\x6c\145\x61\163\x74\x20\x4f\x6e\145\x20\120\162\157\144\x75\x63\x74"); } DB::beginTransaction(); $ref = getRef(); $transfer = stockTransfer::create(array("\146\162\x6f\155\111\104" => $request->fromID, "\164\x6f\111\x44" => $request->toID, "\144\141\164\x65" => $request->date, "\156\x6f\x74\145\x73" => $request->notes, "\165\163\145\162\x49\104" => auth()->user()->id, "\162\x65\x66\111\104" => $ref)); $ids = $request->id; foreach ($ids as $key => $id) { $qty = $request->qty[$key]; stockTransferDetails::create(array("\164\x72\141\x6e\x73\x66\x65\x72\111\104" => $transfer->id, "\160\x72\x6f\x64\x75\x63\164\111\104" => $id, "\161\164\x79" => $qty, "\x72\145\x66\x49\104" => $ref)); $warehouseFrom = warehouses::find($request->fromID); $warehouseTo = warehouses::find($request->toID); createStock($id, 0, $qty, $request->date, "\124\162\x61\x6e\163\146\x65\162\145\144\40\x74\x6f\x20{$warehouseTo->name}", $ref, $request->fromID); createStock($id, $qty, 0, $request->date, "\124\x72\x61\156\163\146\x65\x72\x65\144\x20\x66\162\x6f\155\40{$warehouseFrom->name}", $ref, $request->toID); } DB::commit(); return to_route("\x73\x74\x6f\143\153\124\x72\x61\156\x73\x66\145\x72\x2e\151\x6e\144\145\x78")->with("\x73\x75\143\143\145\163\x73", "\123\x74\x6f\143\x6b\40\124\x72\x61\x6e\163\x66\x65\162\x20\103\162\145\x61\x74\145\x64"); } catch (\Exception $e) { DB::rollback(); return back()->with("\x65\x72\162\x6f\x72", $e->getMessage()); } } public function show($id) { $transfer = stockTransfer::find($id); return view("\163\x74\x6f\x63\153\56\164\162\141\156\163\146\x65\x72\x2e\166\151\x65\167", compact("\164\162\x61\156\x73\146\145\162")); } public function edit(stockTransfer $stockTransfer) { } public function update(Request $request, stockTransfer $stockTransfer) { } public function destroy($id) { try { DB::beginTransaction(); $transfer = stockTransfer::find($id); foreach ($transfer->details as $product) { stock::where("\162\x65\146\111\x44", $product->refID)->delete(); $product->delete(); } $transfer->delete(); DB::commit(); session()->forget("\x63\x6f\x6e\x66\151\162\155\x65\144\x5f\160\141\x73\x73\x77\157\162\x64"); return to_route("\x73\164\157\143\153\124\x72\x61\156\163\x66\x65\x72\56\x69\156\144\145\170")->with("\163\x75\143\x63\x65\163\x73", "\123\x74\157\143\153\x20\124\162\x61\156\x73\x66\145\x72\x20\x44\145\x6c\x65\164\x65\144"); } catch (\Exception $e) { DB::rollBack(); session()->forget("\143\x6f\156\x66\151\162\x6d\x65\x64\x5f\160\141\x73\x73\167\x6f\x72\144"); return to_route("\163\x74\x6f\x63\153\x54\162\x61\156\x73\146\145\162\x2e\151\156\144\x65\170")->with("\145\x72\x72\157\162", $e->getMessage()); } } }